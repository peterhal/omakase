Next Up
-------
- testing
- type system

TODO
----
- marketing
  - mission
  - samples
  - posts
- javascript compat
  - complete scanning
    - regex
  - complete parsing
    - automatic semi-colon insertion
    - Expression NoIn
  - jsdoc import
- scanning
  - unicode escapes
  - floating point numbers
  - verbatim string literals
  - char literals
- writer
  - statements
  - expressions
- transformer
  - statements
  - expressions
  - classes
- language features
  - statements
    - resource acquisition
  - expressions
    - function literals
    - object literals
  - classes
    - constructors
    - arguments
    - implicit this
    - fields
    - static members
    - const
    - inheritance
  - interfaces
  - enums
  - mixins?
  - extensions?
  - namespaces
  - type system
  - iterators
  - await
  - attributes
  - doc comments as attributes
  - javascript interop
    - extern declarations
    - monkey patching
- libs
  - reflection
- compiler
  - in browser
  - self host
  - source maps
  - optimization
- ide

Mission
-------

Omakase is a language for developing large web applications.
- interop with the browser DOM and JS (importing/exporting/inline JS)
- types - non-optional, largely inferred rather than declared
- targeted syntax/semantic fixes (classes, 'this' binding, ...)
- async programming (await/async)
- logical vs. physical code organization
  - logical: namespaces/modules
  - physical: units of distribution/download (think pinto modules)
- debugging (via source maps)
- IDE - code browsing, refactoring?


Design: Doc Comments as Attributes
----------------------------------

Use compile time only attributes plus multi-line string literals for documentation comments.

@Description(@"Filters a collection.")
@Return(@"Those elements which pass the filter.")
Iterable<T> where(Iterable<T> collection, T->bool filter) {
  for (var value in collection) {
    if (filter(value)) yield value;
  }
}

The '@Description' and '@Return(@"' are verbose. Perhaps could shorten to:

@`Filters a collection.`
@Return(`Those elements which pass the filter.`)
Iterable<T> where(Iterable<T> collection, T->bool filter) {
  for (var value in collection) {
    if (filter(value)) yield value;
  }
}

Verbatim string literal before a member decl is 'default' attribute.