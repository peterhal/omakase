// Hello World
class Program<T, U: T> {

  // statements
  parseVariableStatement() : void {
    var a;
    var a, b, c;
    var d = a;
    var e = a, f = b, g = c;
  }

  parseEmptyStatement() : void {
    ;
  }

  parseForStatement() : void {
    for (;;) ;
    for (a;b;c) ;
    for (var a;b;c) ;
    for (var a = b;c;d) ;
  }

  parseForInStatement() : void {

    for (var a in b) ;
  }

  parseIfStatement() : void {
    if (cond) {
    }

    if (cond) {
    } else {
    }

    if (cond) ;

    if (cond)  ; else ;
  }

  parseDoStatement() : void {
    do {

    } while (e);

    do ; while (e);
  }

  parseWhileStatement() : void {
    while (e) ;
    while (e) {}
  }

  parseBreakStatement() : void {
    break;
  }

  parseContinueStatement() : void {
    continue;
  }

  parseReturnStatement() : void {
    return;
    return a;
  }

  parseSwitchStatement() : void {
    switch(v) {
    }
    switch(v) {
    case a:
    }
    switch(v) {
    default:
    }
    switch(v) {
    case a:
      ;
    case b:
    case c:
      ;

    default:
      ;
    }
  }

  parseThrowStatement() : void {
    throw e;
  }

  parseTryStatement() : void {
    try {
      ;
    } catch (e) {
      ;
    }

    try {

    } finally {
      ;
    }

    try {

    } catch (e) {

    } finally {

    }
  }

  parseDebuggerStatement() : void {
    debugger;
  }

  // expressions
  parseFunctionExpression() : void {
    a = () -> b;
    a = (x) -> x;
    a = (x, y) -> x + y;

    a = () -> {};
    a = (x) -> {};
    a = (x, y) -> {};
  }

  parseConditionalExpression() : void {
    a == b ? x : y;
  }

  parseAssignmentExpression() : void {
    a = b;
    a += b;
  }

  parseUnaryExpression() : void {
    typeof a;
    ++a;
    --a;
    +a;
    -a;
    ~a;
    !a;
  }

  parsePostFixExpression() : void {
    a(b);
    a[b];
    a.b;
  }

  parseNewExpression() : void {
    new a();
    new a(b);
  }

  parsePrimaryExpression() : void {
    this;
    [1,2,3];
    (a);
    a;
    null;
    true;
    false;
    1;
    "hello";
  }

  parseBinaryExpression() : void {
    a + b;
    a + b * c;
    // TODO: More binary expressions.
  }

  static javascript main() : void {
    print("Hello World!");
  }
}

function main(): void {
}