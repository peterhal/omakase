Running Omakase Tests ...
Scanning Tests ...
errors/scanner/missing-hex-escape.oma (1, 4): Missing hex digit in hex escape sequence.
errors/scanner/number-too-large.oma (1, 1): Integer literal too large.
errors/scanner/unexpected-char.oma (1, 1): Unexpected character '@'.
errors/scanner/unrecognized-character-escape.oma (1, 3): Unrecognized character escape 'h'.
errors/scanner/unterminated-multi-line-comment.oma (1, 1): Unterminated multi-line comment.
errors/scanner/unterminated-string-literal.oma (1, 1): Unterminated string literal
scanner/all-tokens.oma (1, 1): IDENTIFIER identifier
scanner/all-tokens.oma (2, 1): NUMBER_LITERAL 0
scanner/all-tokens.oma (3, 1): STRING_LITERAL "string"
scanner/all-tokens.oma (4, 1): OPEN_CURLY
scanner/all-tokens.oma (5, 1): CLOSE_CURLY
scanner/all-tokens.oma (6, 1): OPEN_PAREN
scanner/all-tokens.oma (7, 1): CLOSE_PAREN
scanner/all-tokens.oma (8, 1): PERIOD
scanner/all-tokens.oma (9, 1): SEMI_COLON
scanner/all-tokens.oma (10, 1): COMMA
scanner/all-tokens.oma (11, 1): OPEN_ANGLE
scanner/all-tokens.oma (12, 1): CLOSE_ANGLE
scanner/all-tokens.oma (13, 1): LESS_EQUAL
scanner/all-tokens.oma (14, 1): GREATER_EQUAL
scanner/all-tokens.oma (15, 1): EQUAL_EQUAL
scanner/all-tokens.oma (16, 1): NOT_EQUAL
scanner/all-tokens.oma (17, 1): PLUS
scanner/all-tokens.oma (18, 1): MINUS
scanner/all-tokens.oma (19, 1): STAR
scanner/all-tokens.oma (20, 1): BANG
scanner/all-tokens.oma (21, 1): AMPERSAND
scanner/all-tokens.oma (22, 1): AMPERSAND_AMPERSAND
scanner/all-tokens.oma (23, 1): BAR
scanner/all-tokens.oma (24, 1): BAR_BAR
scanner/all-tokens.oma (25, 1): QUESTION
scanner/all-tokens.oma (26, 1): COLON
scanner/all-tokens.oma (27, 1): EQUAL
scanner/all-tokens.oma (28, 1): SLASH
scanner/all-tokens.oma (29, 1): CLASS
scanner/all-tokens.oma (30, 1): FALSE
scanner/all-tokens.oma (31, 1): LET
scanner/all-tokens.oma (32, 1): NULL
scanner/all-tokens.oma (33, 1): TRUE
scanner/all-tokens.oma (34, 1): VAR
scanner/all-tokens.oma (37, 1): END_OF_FILE
scanner/empty.oma (1, 1): END_OF_FILE
scanner/hello.oma (2, 1): CLASS
scanner/hello.oma (2, 7): IDENTIFIER Program
scanner/hello.oma (2, 15): OPEN_CURLY
scanner/hello.oma (3, 3): IDENTIFIER main
scanner/hello.oma (3, 7): OPEN_PAREN
scanner/hello.oma (3, 8): CLOSE_PAREN
scanner/hello.oma (3, 10): OPEN_CURLY
scanner/hello.oma (4, 5): IDENTIFIER print
scanner/hello.oma (4, 10): OPEN_PAREN
scanner/hello.oma (4, 11): STRING_LITERAL "Hello World!"
scanner/hello.oma (4, 25): CLOSE_PAREN
scanner/hello.oma (4, 26): SEMI_COLON
scanner/hello.oma (5, 3): CLOSE_CURLY
scanner/hello.oma (6, 1): CLOSE_CURLY
scanner/hello.oma (7, 1): END_OF_FILE
scanner/test.oma (4, 1): CLASS
scanner/test.oma (4, 7): IDENTIFIER Program
scanner/test.oma (4, 15): OPEN_CURLY
scanner/test.oma (6, 3): IDENTIFIER main
scanner/test.oma (6, 7): OPEN_PAREN
scanner/test.oma (6, 8): CLOSE_PAREN
scanner/test.oma (6, 10): OPEN_CURLY
scanner/test.oma (7, 3): CLOSE_CURLY
scanner/test.oma (8, 1): CLOSE_CURLY
scanner/test.oma (9, 2): END_OF_FILE
Parsing Tests ...
class Program {
  main ( ) : void {
    print ( "Hello World!" ) ;
  }
}

class Program {
  javascript main ( ) : void {
    print ( "Hello World!" ) ;
  }
}
extern javascript function f ( ) : void {
  console . out ( "Hello world" ) ;
}

class Program < T , U : T > {
  parseVariableStatement ( ) : void {
    var a ;
    var a , b , c ;
    var d = a ;
    var e = a , f = b , g = c ;
  }
  parseEmptyStatement ( ) : void {
    ;
  }
  parseForStatement ( ) : void {
    for ( ; ; )
    ;
    for ( a ; b ; c )
    ;
    for ( var a ;
    b ; c )
    ;
    for ( var a = b ;
    c ; d )
    ;
  }
  parseForInStatement ( ) : void {
    for ( a in b )
    ;
  }
  parseIfStatement ( ) : void {
    if ( cond )
    {
    }
    if ( cond )
    {
    }
    else
      {
      }
    if ( cond )
    ;
    if ( cond )
    ;
    else
      ;
  }
  parseDoStatement ( ) : void {
    do {
    }
    while ( e ) ;
    do ;
    while ( e ) ;
  }
  parseWhileStatement ( ) : void {
    while ( e )
    ;
    while ( e )
    {
    }
  }
  parseBreakStatement ( ) : void {
    break ;
  }
  parseContinueStatement ( ) : void {
    continue ;
  }
  parseReturnStatement ( ) : void {
    return ;
    return a ;
  }
  parseSwitchStatement ( ) : void {
    switch ( v )
    { } switch ( v )
    { case a :
    } switch ( v )
    { default :
    } switch ( v )
    { case a :
      ;
    case b :
    case c :
      ;
    default :
      ;
    } }
  parseThrowStatement ( ) : void {
    throw e ;
  }
  parseTryStatement ( ) : void {
    try
    {
      ;
    }
    catch ( e )
    {
      ;
    }
    try
    {
    }
    finally {
      ;
    }
    try
    {
    }
    catch ( e )
    {
    }
    finally {
    }
  }
  parseDebuggerStatement ( ) : void {
    debugger ;
  }
  parseFunctionExpression ( ) : void {
    a = ( ) -> b ;
    a = ( x ) -> x ;
    a = ( x , y ) -> x + y ;
    a = ( ) -> {
    }
    ;
    a = ( x ) -> {
    }
    ;
    a = ( x , y ) -> {
    }
    ;
  }
  parseConditionalExpression ( ) : void {
    a == b ? x : y ;
  }
  parseAssignmentExpression ( ) : void {
    a = b ;
    a += b ;
  }
  parseUnaryExpression ( ) : void {
    typeof a ;
    ++ a ;
    -- a ;
    + a ;
    - a ;
    ~ a ;
    ! a ;
  }
  parsePostFixExpression ( ) : void {
    a ( b ) ;
    a [ b ] ;
    a . b ;
  }
  parseNewExpression ( ) : void {
    new a ( ) ;
    new a ( b ) ;
  }
  parsePrimaryExpression ( ) : void {
    this ;
    [  1 ,  2 ,  3 ] ;
    ( a ) ;
    a ;
    null ;
    true ;
    false ;
     1 ;
    "hello" ;
  }
  parseBinaryExpression ( ) : void {
    a + b ;
    a + b * c ;
  }
  static javascript main ( ) : void {
    print ( "Hello World!" ) ;
  }
}
function main ( ) : void {
}

Symbol Tests ...
Missing definition of 'main'.
A
B
C
symbols/members.oma (3, 25): Expected expression of type 'number' but found 'string'.
A
  a
  b
  c
Compiling Error Tests ...
errors/compiler/compile.oma (1, 12): Duplicate class 'T'.
errors/compiler/compile.oma (1, 9): Related location
Compiling Tests Debug ...
( function ( ) {
  MyClass = function ( ) {
  }
  ;
  MyClass . prototype . classField = null ;
  MyClass . prototype . numberField = null ;
  MyClass . staticField = 15 ;
  MyClass . prototype . getClassField = function ( ) {
    return this . classField ;
  }
  ;
  MyClass . prototype . getStaticField = function ( ) {
    return MyClass . staticField ;
  }
  ;
}
( ) ) ;
( function ( ) {
  ExternClass = function ( ) {
  }
  ;
  ExternClass . prototype . externField = null ;
}
( ) ) ;
function f ( ex ) {
  ex . externMethod ( ) ;
  return MyClass . staticField + ef ( ) + ex . externField ;
}
;
function main ( ) {
}
main ( ) ;

Compiling Tests Optimized ...
( function ( ) {
  a = function ( ) {
  }
  ;
  a . prototype . b = null ;
  a . prototype . c = null ;
  a . d = 15 ;
  a . prototype . e = function ( ) {
    return this . b ;
  }
  ;
  a . prototype . f = function ( ) {
    return a . d ;
  }
  ;
}
( ) ) ;
( function ( ) {
  ExternClass = function ( ) {
  }
  ;
  ExternClass . prototype . externField = null ;
}
( ) ) ;
function g ( h ) {
  h . externMethod ( ) ;
  return a . d + i ( ) + h . externField ;
}
;
function j ( ) {
}
j ( ) ;
